<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.teamone.ownit.mapper.MypageMapper">

	<!-- 류혜지 -->
	<select id="selectMemberInfo" resultType="com.teamone.ownit.vo.MypageVO">
        SELECT 
        	i.image_original_file1,
        	m.member_id, 
 			m.member_nickname,
			m.member_name,
			m.member_phone,
			a.address_zipcode,
			a.address1,
			a.address2   	 
				FROM member m
				LEFT JOIN address a
				ON a.address_idx = m.member_idx
				LEFT JOIN image i
				ON m.member_idx = i.member_idx
				WHERE member_id=#{member_id}
    </select>	
	<!-- 전체 게시물 목록 갯수 조회(검색 기능 추가) -->
	<select id="selectMySellListCount" resultType="integer">
		SELECT 
			COUNT(*) 
			FROM member m
				LEFT JOIN image i
				ON m.member_idx = i.product_idx
				LEFT JOIN order_sell o
				ON m.member_idx = o.order_sell_idx
				LEFT JOIN product p
				ON m.member_idx = p.product_idx				
				WHERE member_id=#{id}			
			
	</select>	
	<select id="selectMySell" resultType="com.teamone.ownit.vo.MypageSellListVO">
        SELECT 
        	m.member_id,
        	i.image_real_file1,
        	p.product_name, 
			p.product_sell_price,
			o.order_sell_idx,
 			o.order_sell_date,
			o.order_sell_gb
				FROM member m
				LEFT JOIN image i
				ON m.member_idx = i.product_idx
				LEFT JOIN order_sell o
				ON m.member_idx = o.order_sell_idx
				LEFT JOIN product p
				ON m.member_idx = p.product_idx	
			WHERE member_id=#{id}
			ORDER BY 
				o.order_sell_idx DESC
			LIMIT #{startRow}, #{listLimit}
    </select>		
	<update id="updateMember">
		UPDATE member
				member_passwd = #{newPasswd}
			WHERE 
				member_id = #{member.member_id} AND member_passwd = #{member.member_passwd}
	</update>	
	
    <select id="selectWishlist" resultType="com.teamone.ownit.vo.WishlistVO">
        SELECT 
			m.member_idx,
			m.member_id,
			p.product_idx,
			p.product_name,
        	i.image_real_file1
				FROM wishlist w
				LEFT JOIN member m
				ON w.member_idx = m.member_idx
				LEFT JOIN product p
				ON w.product_idx = p.product_idx	
				LEFT JOIN image i
				ON w.product_idx = i.product_idx				
				WHERE m.member_id=#{id}
    </select>








































































































































































































































<!-- 정채연 -->

<!-- 계좌 관리 : 해당 회원의 총 계좌 갯수 구하기 -->
<select id="selectAccountCount" resultType="Integer">
	SELECT COUNT(*) FROM account WHERE member_idx = #{member_idx}
</select>

<!-- 계좌 관리 : 계좌 추가 작업 수행 -->
<insert id="insertAccount">
	<selectKey keyProperty="isMain" resultType="Integer" order="BEFORE">
		SELECT COUNT(account_gb) FROM account
			WHERE
			member_idx = #{member_idx}
			AND
			account_gb = 0
	</selectKey>
	INSERT INTO account
	VALUES (
		NULL,
		#{member_idx},
		#{account.account_bank},
		#{account.account_num},
		#{account.account_owner_name},
		<if test="accountCount == 0">
			'0',
		</if>
		<if test="accountCount > 0">
			<choose>
				<when test="isMain == 0">
					'0',
				</when>
				<when test="isMain > 0">
					'1',
				</when>
			</choose>
		</if>
		#{account.account_nickname}
	)
</insert>

<!-- 계좌 관리 : 해당 회원의 계좌 목록 가져오기 -->
<select id="selectAccountList" resultType="com.teamone.ownit.vo.AccountVO">
	SELECT * FROM account
	WHERE
		member_idx = #{member_idx}
	ORDER BY account_gb
</select>

<!-- 계좌 관리 : 계좌 정보 수정 -->
<update id="updateAccount">
	UPDATE account
		SET
			account_bank = #{account_bank},
			account_num = #{account_num},
			account_owner_name = #{account_owner_name},
			account_nickname = #{account_nickname}
		WHERE
			account_idx = #{account_idx}
</update>

<!-- 계좌 관리 : 계좌 삭제 -->
<delete id="deleteAccount">
	DELETE
		FROM account
		WHERE
			account_idx = #{account_idx}
</delete>

<!-- 계좌 관리 : 기본 계좌 설정 -->
<update id="defaultAccount">
	UPDATE account
		SET
			account_gb = '0'
		WHERE
			member_idx = #{member_idx}
			AND
			account_idx = #{account_idx}
</update>

<!-- 계좌 관리 : 기본 계좌 설정 전 전체 나머지 계좌로 설정 -->
<update id="otherAccount">
	UPDATE account
		SET
			account_gb = '1'
		WHERE
			member_idx = #{member_idx}
</update>









</mapper> 
